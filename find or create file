from fastapi import FastAPI
from google.oauth2.credentials import Credentials
from googleapiclient.errors import HttpError
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from fastapi.requests import Request
from fastapi.responses import JSONResponse
from googleapiclient.http import MediaIoBaseUpload
import requests
from io import BytesIO


app = FastAPI()

# Konfigurasi kredensial Oauth
SCOPES = ['https://www.googleapis.com/auth/drive']
CLIENT_SECRET_FILE = 'client_secret_686077123216-eg2av040l4girm5fo19q4a4t4lf0iptt.apps.googleusercontent.com.json'

# membuat konektivitas dengan drive
def create_drive_service():
    """Membuat Drive service menggunakan kredensial Oauth"""
    credentials = None
    # Coba untuk memuat credentials dari file token.json
    try:
        credentials = Credentials.from_authorized_user_file('token.json', SCOPES)
    except Exception as e:
        print('Tidak dapat memuat kredensial Oauth: ' + str(e))
    # Jika credentials belum ada, maka buat credentials dengan melakukan Oauth flow
    
        if credentials and credentials.expired and credentials.refresh_token:
            credentials.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRET_FILE, SCOPES)
            credentials = flow.run_local_server(port=63176)
        # Simpan credentials yang berhasil dibuat ke file token.json
        with open('token.json', 'w') as token:
            token.write(credentials.to_json())
    # Buat service Drive menggunakan credentials yang sudah di-load
    drive_service = build('drive', 'v3', credentials=credentials)
    return drive_service

@app.post("/find_or_create_file/")
async def find_or_create_file(name: str):
    """Mencari atau membuat file di Google Drive dengan nama tertentu"""

    try:
        # Buat service Drive menggunakan credentials yang sudah di-load
        drive_service = create_drive_service()

        # Definisikan parameter untuk mencari file dengan nama tertentu
        query = f"name='{name}' and mimeType!='application/vnd.google-apps.folder' and trashed=false"
        fields = "nextPageToken, files(id, name, mimeType)"

        # Cari file dengan nama tertentu di Google Drive
        results = drive_service.files().list(q=query, fields=fields).execute()
        items = results.get("files", [])

        # Jika file dengan nama tertentu sudah ada, kembalikan ID file tersebut
        if items:
            file = items[0]
            return JSONResponse(content={"message": f"File '{name}' telah ditemukan dengan ID: {file.get('id')}"})

        # Jika file dengan nama tertentu belum ada, buat file baru
        file_metadata = {
            "name": name
        }
        file = drive_service.files().create(body=file_metadata, fields="id").execute()

        return JSONResponse(content={"message": f"File '{name}' telah dibuat dengan ID: {file.get('id')}"})

    except HttpError as error:
        return JSONResponse(content={"message": f"An error occurred: {str(error)}"}, status_code=500)

# checking server error
@app.exception_handler(Exception)
async def value_error_exception_handler(request: Request, exc: Exception):
    return JSONResponse(
        status_code=500,
        content={"message": str(exc)},
    )
